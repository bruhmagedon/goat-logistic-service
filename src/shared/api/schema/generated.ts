/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User login
         * @description Authenticates a user and returns access and refresh tokens.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description User login credentials */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["authservice.LoginData"];
                };
            };
            responses: {
                /** @description Access and refresh tokens */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["authservice.Tokens"];
                    };
                };
                /** @description Forbidden - Invalid credentials or request */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User logout
         * @description Invalidates the user's session by revoking the refresh token.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Successfully logged out */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Forbidden - Invalid token or request */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User registration
         * @description Registers a new user and returns access and refresh tokens.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description User registration data */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["authservice.RegisterData"];
                };
            };
            responses: {
                /** @description Access and refresh tokens */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["authservice.Tokens"];
                    };
                };
                /** @description Forbidden - Invalid registration data or request */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Получить корзину пользователя
         * @description Возвращает содержимое корзины текущего пользователя.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Содержимое корзины пользователя */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cart.Cart"];
                    };
                };
                /** @description Ошибка получения корзины */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Доступ запрещен */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cart/clear": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Очистить корзину
         * @description Удаляет все товары из корзины текущего пользователя.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Корзина успешно очищена */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Ошибка очистки корзины */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Доступ запрещен */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cart/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Обновить элемент корзины
         * @description Обновляет количество, размер или другие параметры элемента в корзине.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Данные элемента корзины для обновления */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cart.Item"];
                };
            };
            responses: {
                /** @description Элемент корзины успешно обновлен */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Ошибка обновления элемента корзины */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Доступ запрещен */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        /**
         * Добавить товар в корзину
         * @description Позволяет добавить новый товар в корзину пользователя.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Данные товара для добавления в корзину */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["cart.Item"];
                };
            };
            responses: {
                /** @description Добавленный товар */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["cart.Item"];
                    };
                };
                /** @description Ошибка ввода или бизнес-логики */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Доступ запрещен */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cart/item/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Удалить элемент из корзины
         * @description Удаляет элемент корзины по его идентификатору.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID элемента корзины */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Элемент успешно удален */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Ошибка удаления элемента корзины */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Доступ запрещен */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update an existing client
         * @description This endpoint updates an existing client's information in the system.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Client information to be updated */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["clientservice.ClientInfo"];
                };
            };
            responses: {
                /** @description Updated client information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["clientservice.ClientInfo"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get client
         * @description Retrieves client details by their ID. Authorization is required to access this endpoint.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Client details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["clientservice.ClientInfo"];
                    };
                };
                /** @description Bad Request - Invalid client ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Forbidden - Invalid token or unauthorized request */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete client
         * @description Deletes a client by their ID. Authorization is required to access this endpoint.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Successfully deleted client */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Bad Request - Invalid client ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Forbidden - Invalid token or unauthorized request */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of clients
         * @description This endpoint retrieves a list of clients from the client service.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["clientservice.ClientInfo"][];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Создать заказ
         * @description Создает новый заказ, используя переданные идентификаторы элементов корзины.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Список идентификаторов элементов корзины */
            requestBody: {
                content: {
                    "application/json": number[];
                };
            };
            responses: {
                /** @description Заказ успешно создан */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Ошибка при создании заказа */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Доступ запрещен */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Получить заказы пользователя
         * @description Возвращает список всех заказов, связанных с текущим авторизованным пользователем.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Список заказов пользователя */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["order.Order"][];
                    };
                };
                /** @description Ошибка при получении заказов пользователя */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Доступ запрещен */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of products
         * @description This endpoint retrieves a list of all products from the warehouse.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description List of products */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["warehousesevice.Product"][];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        /**
         * Update a list of products
         * @description This endpoint allows you to update a list of products in the warehouse.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description List of products to update */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["warehousesevice.Product"][];
                };
            };
            responses: {
                /** @description Products successfully updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        /**
         * Add products to the warehouse
         * @description This endpoint allows you to add a list of products to the warehouse.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description List of products to be added */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["warehousesevice.Product"][];
                };
            };
            responses: {
                /** @description Products successfully added */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        /**
         * Delete products from the warehouse
         * @description This endpoint allows you to delete a list of products from the warehouse by their IDs.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description List of product IDs to be deleted */
            requestBody: {
                content: {
                    "application/json": number[];
                };
            };
            responses: {
                /** @description Products successfully deleted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a product by ID
         * @description This endpoint retrieves a product from the warehouse by its ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Product ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Product details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["warehousesevice.Product"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/materials": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of materials
         * @description This endpoint retrieves a list of all materials from the warehouse.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description List of materials */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["warehousesevice.ProductMaterial"][];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/order/{userId}/{date}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get order report
         * @description Retrieves the order report for a specific user by their ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    userId: number;
                    /** @description Date */
                    date: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Order report data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description Invalid request or failed to process the response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Forbidden - context creation failed */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/sell/{userId}/{date}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get sell report
         * @description Retrieves the sell report for a specific user by their ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    userId: number;
                    /** @description Date */
                    date: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Sell report data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
                /** @description Invalid request or failed to process the response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Forbidden - context creation failed */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/requests/{requestId}/{status}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update request status
         * @description Updates the status of a specific request by its ID.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Request ID */
                    requestId: number;
                    /** @description New status of the request */
                    status: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Status updated successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid request or failed to process the response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Forbidden - context creation failed */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/requests/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get requests
         * @description Retrieves a list of requests.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of requests */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>[];
                    };
                };
                /** @description Invalid request or failed to process the response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Forbidden - context creation failed */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/routes/route/best": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * получение самого быстрого пути
         * @description получение самого быстрого пути
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Best route */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["route.Route"];
                    };
                };
                /** @description Invalid request or failed to process the response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Forbidden - context creation failed */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/catalog": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get catalog
         * @description Retrieves the catalog based on the provided query parameters.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Filter query parameter */
                    filter?: string;
                    /** @description Sort query parameter */
                    sort?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Catalog data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["search.Catalog"];
                    };
                };
                /** @description Invalid request or failed to process the response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Forbidden - context creation failed */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/catalog/product/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get product catalog
         * @description Retrieves the catalog for a specific product by its ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Product ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Product catalog data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["search.Product"];
                    };
                };
                /** @description Invalid request or failed to process the response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Forbidden - context creation failed */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/filters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get active filters
         * @description Retrieves a list of active filters from the search service.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of active filters */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["search.Filter"][];
                    };
                };
                /** @description Invalid request or failed to process the response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Forbidden - context creation failed */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update an existing user
         * @description This endpoint allows you to update the details of an existing user in the system.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description User information to be updated */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["userservice.User"];
                };
            };
            responses: {
                /** @description Updated user information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["userservice.User"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        /**
         * Add a new user
         * @description This endpoint allows you to add a new user to the system.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description User information to be added */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["userservice.User"];
                };
            };
            responses: {
                /** @description User successfully added */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["userservice.User"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a user by ID
         * @description This endpoint retrieves the details of a user by their ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description User details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["userservice.User"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete a user
         * @description This endpoint allows you to delete an existing user by their ID.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID to be deleted */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of users
         * @description This endpoint retrieves a list of all users from the system.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description List of users */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["userservice.User"][];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        "authservice.LoginData": {
            /** @description Пароль пользователя для входа в систему. */
            password?: string;
            /** @description Имя пользователя для входа в систему. */
            username?: string;
        };
        "authservice.RegisterData": {
            /** @description Адрес клиента, связанного с пользователем. */
            address?: string;
            /** @description ИНН клиента, связанного с пользователем. */
            inn?: string;
            /** @description Имя клиента, связанного с пользователем. */
            name?: string;
            /** @description Пароль, который пользователь создаст при регистрации. */
            password?: string;
            /** @description Роль пользователя, например, администратор или обычный пользователь. */
            role?: string;
            /** @description Имя пользователя, которое будет использоваться при регистрации. */
            username?: string;
        };
        "authservice.Tokens": {
            /** @description Токен доступа для авторизации запросов. */
            access_token?: string;
            /** @description Токен для обновления access_token, если он истек. */
            refresh_token?: string;
        };
        "cart.Cart": {
            /** @description Уникальный идентификатор корзины. */
            id?: number;
            /** @description Список товаров, добавленных в корзину. */
            items?: components["schemas"]["cart.Item"][];
            /** @description Общая сумма стоимости всех товаров в корзине. */
            total?: number;
        };
        "cart.Item": {
            /** @description Цвет товара. */
            color?: string;
            /** @description Количество единиц данного товара в корзине. */
            count?: number;
            /** @description Уникальный идентификатор элемента корзины. */
            id?: number;
            /** @description Признак, выбран ли данный товар (например, для оформления заказа). */
            isSelected?: boolean;
            /** @description Название товара. */
            name?: string;
            /** @description Цена за единицу товара. */
            price?: number;
            /** @description Идентификатор товара (связь с ProductItem). */
            productId?: number;
            /** @description Размер товара (например, 42, 50 и т.д.). */
            size?: number;
        };
        "clientservice.ClientInfo": {
            /** @description Адрес клиента. */
            address?: string;
            /** @description Уникальный идентификатор клиента. */
            id?: number;
            /** @description ИНН клиента. */
            inn?: string;
            /** @description Имя клиента. */
            name?: string;
        };
        "order.Order": {
            /** @description Дата и время создания заказа */
            createDate?: string;
            /** @description Общий вес доставки для всех товаров в заказе */
            deliveryWeight?: number;
            /** @description Уникальный идентификатор заказа */
            id?: string;
            status?: components["schemas"]["order.Status"];
            /** @description Общая сумма заказа */
            total?: number;
        };
        /** @description Текущий статус заказа (например, "в процессе", "доставлен", "отменен") */
        "order.Status": string;
        "route.Location": {
            id?: string;
            lat?: number;
            lon?: number;
        };
        "route.Route": {
            path?: components["schemas"]["route.Location"][];
            total_distance?: number;
        };
        "search.AppliedFilters": {
            brand?: string[];
            color?: string[];
            limit?: number;
            material?: string[];
            maxPrice?: number;
            minPrice?: number;
            page?: number;
            size?: number[];
        };
        "search.Catalog": {
            filters?: components["schemas"]["search.AppliedFilters"];
            pages?: number;
            products?: components["schemas"]["search.Product"][];
            searchId?: string;
        };
        /** @description Завод, производящий продукт. */
        "search.Factory": {
            /** @description Название завода. */
            factoryName?: string;
            /** @description Уникальный идентификатор завода. */
            id?: number;
        };
        "search.Filter": {
            allowedValues?: string[];
            name?: string;
        };
        "search.Product": {
            /** @description Название бренда продукта. */
            brandName?: string;
            factory?: components["schemas"]["search.Factory"];
            /** @description Уникальный идентификатор продукта. */
            id?: number;
            /** @description Список изображений продукта. */
            images?: components["schemas"]["search.ProductImages"][];
            /** @description Список товаров (размер, количество на складе и т.д.). */
            items?: components["schemas"]["search.ProductItem"][];
            /** @description Материалы, из которых состоит продукт. */
            materials?: components["schemas"]["search.ProductMaterial"][];
            /** @description Название продукта. */
            name?: string;
            /** @description Цена продукта. */
            price?: number;
            /** @description Статус продукта (например, "в наличии", "не в наличии"). */
            status?: string;
        };
        "search.ProductImages": {
            /** @description Уникальный идентификатор изображения. */
            id?: number;
            /** @description URL изображения продукта. */
            imageUrl?: string;
        };
        "search.ProductItem": {
            /** @description Цвет товара. */
            color?: string;
            /** @description Уникальный идентификатор товара. */
            id?: number;
            /** @description Размер товара (например, 42, 50 и т.д.). */
            size?: number;
            /** @description Количество товара на складе. */
            stockCount?: number;
            /** @description Вес товара. */
            weight?: number;
        };
        "search.ProductMaterial": {
            /** @description Уникальный идентификатор материала. */
            Id?: number;
            /** @description Название материала (например, "дерево", "металл"). */
            Material?: string;
        };
        "userservice.User": {
            /** @description Идентификатор клиента, с которым связан пользователь. */
            clientId?: number;
            /** @description Уникальный идентификатор пользователя. */
            id?: number;
            /** @description Пароль пользователя для входа в систему. */
            password?: string;
            /** @description Роль пользователя (например, администратор или обычный пользователь). */
            role?: string;
            /** @description Статус пользователя (например, активен или заблокирован). */
            status?: number;
            /** @description Имя пользователя для входа в систему. */
            username?: string;
        };
        /** @description Завод, производящий продукт. */
        "warehousesevice.Factory": {
            /** @description Название завода. */
            factoryName?: string;
            /** @description Уникальный идентификатор завода. */
            id?: number;
        };
        "warehousesevice.Product": {
            /** @description Название бренда продукта. */
            brandName?: string;
            factory?: components["schemas"]["warehousesevice.Factory"];
            /** @description Уникальный идентификатор продукта. */
            id?: number;
            /** @description Список изображений продукта. */
            images?: components["schemas"]["warehousesevice.ProductImages"][];
            /** @description Список товаров (размер, количество на складе и т.д.). */
            items?: components["schemas"]["warehousesevice.ProductItem"][];
            /** @description Материалы, из которых состоит продукт. */
            materials?: components["schemas"]["warehousesevice.ProductMaterial"][];
            /** @description Название продукта. */
            name?: string;
            /** @description Цена продукта. */
            price?: number;
            /** @description Статус продукта (например, "в наличии", "не в наличии"). */
            status?: string;
        };
        "warehousesevice.ProductImages": {
            /** @description Уникальный идентификатор изображения. */
            id?: number;
            /** @description URL изображения продукта. */
            imageUrl?: string;
        };
        "warehousesevice.ProductItem": {
            /** @description Цвет товара. */
            color?: string;
            /** @description Уникальный идентификатор товара. */
            id?: number;
            /** @description Размер товара (например, 42, 50 и т.д.). */
            size?: number;
            /** @description Количество товара на складе. */
            stockCount?: number;
            /** @description Вес товара. */
            weight?: number;
        };
        "warehousesevice.ProductMaterial": {
            /** @description Уникальный идентификатор материала. */
            id?: number;
            /** @description Название материала (например, "дерево", "металл"). */
            material?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
